package com.kaisn.ems;

import java.io.IOException;
import java.io.InputStream;
import java.util.Vector;

import javax.swing.table.AbstractTableModel;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import com.kaisn.dao.StudentMapper;
import com.kaisn.pojo.Student;

class CommonTableModel extends AbstractTableModel 
{
	private static final long serialVersionUID = 1L;
	
	private Vector<Vector<Object>> rowData;
	private Vector<String> colnumNames;

	public int getRowCount()
	{
		return this.rowData.size();
	}
    public int getColumnCount()
    {
		return this.colnumNames.size();
	}
	public Object getValueAt(int row, int col)
	{
		return this.rowData.get(row).get(col);
	}
	
	public String getColumnName(int i)
	{
		return this.colnumNames.get(i);
	}
	
	public CommonTableModel(String name)
	{
		SqlSession session=null;
		this.setColnumNames();
		try {
			String config="SqlMapConfig.xml";
			InputStream inputStream = Resources.getResourceAsStream(config);
			SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(inputStream);
			session = factory.openSession();
			StudentMapper mapper = session.getMapper(StudentMapper.class);
//			this.rowData = mapper.getStudentList(name);
		} catch (IOException e) {
			e.printStackTrace();
		}finally {
			if(session!=null)
				session.close();
		}
	}
	
	public CommonTableModel(String sql,Object[] values)
	{
		this.setColnumNames();
		this.rowData=DbUtils.selectTable(sql, values);
	}
	
	public CommonTableModel(){
		SqlSession session=null;
		this.setColnumNames();
		try {
			String config="SqlMapConfig.xml";
			InputStream inputStream = Resources.getResourceAsStream(config);
			SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(inputStream);
			session = factory.openSession();
			StudentMapper mapper = session.getMapper(StudentMapper.class);
//			this.rowData = mapper.getStudentList(null);
			
			Vector<Student> studentList = mapper.getStudentList(null);
			for (Student student : studentList) {
				Vector<Object> vector = new Vector<Object>();
				vector.add(student.getNo());
				vector.add(student.getName());
				vector.add(student.getGender());
				vector.add(student.getAge());
				vector.add(student.getPlace());
				vector.add(student.getDept());
				this.rowData.add(vector);
			}
			
		} catch (IOException e) {
			e.printStackTrace();
		}finally {
			if(session!=null)
				session.close();
		}
		//this.rowData=DbUtils.selectTable(Constans.SELECT_SQL, new Object[]{});
	}
	
	private void setColnumNames(){
		colnumNames=new Vector<String>();
		colnumNames.add("学号");
		colnumNames.add("姓名");
		colnumNames.add("性别");
		colnumNames.add("年龄");
		colnumNames.add("籍贯");
		colnumNames.add("院系");	
	}
}
