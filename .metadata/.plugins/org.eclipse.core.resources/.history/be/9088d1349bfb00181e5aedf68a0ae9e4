package com.kaisn.utils;

import java.io.File;
import java.io.FileOutputStream;
import java.lang.reflect.Field;
import java.util.HashMap;

import org.apache.poi.hssf.usermodel.DVConstraint;
import org.apache.poi.hssf.usermodel.HSSFDataValidation;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.DataValidation;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.Name;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.VerticalAlignment;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.util.CellRangeAddressList;
import org.apache.poi.ss.util.WorkbookUtil;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.kaisn.anno.FieldMeta;
import com.kaisn.pojo.Student;

public class POIExcelUtil {
	
	private static String EXCEL_HIDE_SHEET_NAME = "excelhidesheetname"; 
	private static String HIDE_SHEET_NAME_PROVINCE = "provinceList";
	
	public static void createExcel(Class<?> cls,FileOutputStream out) throws Exception
	{
		Workbook workbook = new HSSFWorkbook();
		String safeName1 = WorkbookUtil.createSafeSheetName("学生列表");
        Sheet sheet = workbook.createSheet(safeName1);
		setCellStyle(workbook,sheet,(short)13);
		Row row = sheet.createRow(0);
		Field[] fields = cls.getDeclaredFields();
		for (int i=0;i<fields.length;i++) {
			FieldMeta fieldMeta = fields[i].getAnnotation(FieldMeta.class);
			String name = fieldMeta.name();
			Cell cell = row.createCell(i);
			cell.setCellValue(name);
		}
		creatExcelHidePage(workbook);
		setDataValidation(workbook);
		workbook.write(out);
		workbook.close();
		out.close();
	}
	
	
	private static void setCellStyle(Workbook workbook,Sheet sheet,short fontsize) 
	{
		// 创建样式
		CellStyle style = workbook.createCellStyle();
		style.setAlignment(HorizontalAlignment.CENTER);// 水平居中
		style.setVerticalAlignment(VerticalAlignment.CENTER);// 垂直居中
		// 创建字体
		Font font = workbook.createFont();
		font.setBold(true);
		font.setFontHeightInPoints(fontsize);
		// 加载字体
		style.setFont(font);
	}
	
	
	/**  
     * 设置模板文件的横向表头单元格的样式  
     * @param wb  
     * @return  
     */ 
    public static void creatExcelHidePage(Workbook workbook){   
    	HashMap<String, String[]> areaDictMap = new HashMap<String,String[]>();
    	String jsonArea = ResourceReaderUtil.loadTemplate("/local/area.json");
    	JSONArray rootArray = JSON.parseArray(jsonArea);
    	//省
    	String[] provinceList = new String[rootArray.size()];
    	for(int i=0;i<rootArray.size();i++){
    		JSONObject provinceObject = rootArray.getJSONObject(i);
    		String province = provinceObject.getString("name");
    		provinceList[i]=province;
    		//市
    		JSONArray cityArray = provinceObject.getJSONArray("city");
    		String[] cityList = new String[cityArray.size()];
    		for(int j=0;j<cityArray.size();j++){
    			JSONObject cityObject = cityArray.getJSONObject(j);
        		String city = cityObject.getString("name");
        		cityList[j]=city;
        		//区
        		JSONArray areaArray = cityObject.getJSONArray("area");
        		String[] areaList=new String[areaArray.size()];
        		for(int k=0;k<areaArray.size();k++){
        			String area = areaArray.getString(k);
        			areaList[k]=area;
        		}
        		areaDictMap.put(cityList[j], areaList);
    		}
    		areaDictMap.put(provinceList[i], cityList);
    	}
        Sheet hideInfoSheet = workbook.createSheet(EXCEL_HIDE_SHEET_NAME);//隐藏一些信息   
        //在隐藏页设置选择信息   
        //第一行设置省份名称列表   
        Row provinceNameRow = hideInfoSheet.createRow(0);   
        creatRow(provinceNameRow, provinceList);   
        //以下行设置城市名称列表   
        for(int i=0;i<provinceList.length;i++){
        	Row cityNameRow = hideInfoSheet.createRow(i+1);
        	creatRow(cityNameRow, areaDictMap.get(provinceList[i]));
        }
        //名称管理   
        //第一行设置省份名称列表   
        creatExcelNameList(workbook, HIDE_SHEET_NAME_PROVINCE, 1, provinceList.length, false);   
        //以后动态大小设置省份对应的城市列表
        int count=2;
        for(int i=0;i<provinceList.length;i++,count++){
        	creatExcelNameList(workbook, provinceList[i], count, areaDictMap.get(provinceList[i]).length, true);
        } 
        //设置隐藏页标志   
        workbook.setSheetHidden(workbook.getSheetIndex(EXCEL_HIDE_SHEET_NAME), true);   
    }  
    
    /**  
     * 创建一个名称  
     * @param workbook  
     */  
    private static void creatExcelNameList(Workbook workbook,String nameCode,int order,int size,boolean cascadeFlag){   
        Name name;   
        name = workbook.createName();   
        name.setNameName(nameCode);   
        name.setRefersToFormula(EXCEL_HIDE_SHEET_NAME+"!"+creatExcelNameList(order,size,cascadeFlag));   
    }   
    
    /**  
     * 名称数据行列计算表达式  
     * @param workbook  
     */  
    private static String creatExcelNameList(int order,int size,boolean cascadeFlag){   
        char start = 'A';   
        if(cascadeFlag){   
            start = 'B';   
            if(size<=25){   
                char end = (char)(start+size-1);   
                return "$"+start+"$"+order+":$"+end+"$"+order;   
            }else{   
                char endPrefix = 'A';   
                char endSuffix = 'A';   
                if((size-25)/26==0||size==51){//26-51之间，包括边界（仅两次字母表计算）   
                    if((size-25)%26==0){//边界值   
                        endSuffix = (char)('A'+25);   
                    }else{   
                        endSuffix = (char)('A'+(size-25)%26-1);   
                    }   
                }else{//51以上   
                    if((size-25)%26==0){   
                        endSuffix = (char)('A'+25);   
                        endPrefix = (char)(endPrefix + (size-25)/26 - 1);   
                    }else{   
                        endSuffix = (char)('A'+(size-25)%26-1);   
                        endPrefix = (char)(endPrefix + (size-25)/26);   
                    }   
                }   
                return "$"+start+"$"+order+":$"+endPrefix+endSuffix+"$"+order;   
            }   
        }else{   
            if(size<=26){   
                char end = (char)(start+size-1);   
                return "$"+start+"$"+order+":$"+end+"$"+order;   
            }else{   
                char endPrefix = 'A';   
                char endSuffix = 'A';   
                if(size%26==0){   
                    endSuffix = (char)('A'+25);   
                    if(size>52&&size/26>0){   
                        endPrefix = (char)(endPrefix + size/26-2);   
                    }   
                }else{   
                    endSuffix = (char)('A'+size%26-1);   
                    if(size>52&&size/26>0){   
                        endPrefix = (char)(endPrefix + size/26-1);   
                    }   
                }   
                return "$"+start+"$"+order+":$"+endPrefix+endSuffix+"$"+order;   
            }   
        }   
    } 
    
    /**  
     * 创建一列数据  
     * @param currentRow  
     * @param textList  
     */  
    private static void creatRow(Row currentRow,String[] textList){   
        if(textList!=null&&textList.length>0){   
            int i = 0;   
            for(String cellValue : textList){   
                Cell userNameLableCell = currentRow.createCell(i++);   
                userNameLableCell.setCellValue(cellValue);   
            }   
        }   
    }/**  
     * 添加数据验证选项  
     * @param sheet  
     */  
    public static void setDataValidation(Workbook wb){   
        int sheetIndex = wb.getNumberOfSheets();   
        if(sheetIndex>0){   
            for(int i=0;i<sheetIndex;i++){   
                Sheet sheet = wb.getSheetAt(i);   
                if(!EXCEL_HIDE_SHEET_NAME.equals(sheet.getSheetName())){
                	DataValidation data_validation_list = null;
                    //省份选项添加验证数据    
                	for(int a=2;a<3002;a++){
                        data_validation_list = getDataValidationByFormula(HIDE_SHEET_NAME_PROVINCE,a,2);   
                        sheet.addValidationData(data_validation_list);   
                        //城市选项添加验证数据     
                        data_validation_list = getDataValidationByFormula("INDIRECT(B"+a+")",a,3);   
                        sheet.addValidationData(data_validation_list);   
                        //性别添加验证数据     
                        data_validation_list = getDataValidationByFormula(HIDE_SHEET_NAME_SEX,a,1);   
                        sheet.addValidationData(data_validation_list);     
                    }
                }   
            }   
        }   
    }  
    /**  
     * 使用已定义的数据源方式设置一个数据验证  
     * @param formulaString  
     * @param naturalRowIndex  
     * @param naturalColumnIndex  
     * @return  
     */  
    private static DataValidation getDataValidationByFormula(String formulaString,int naturalRowIndex,int naturalColumnIndex){   
        //加载下拉列表内容     
        DVConstraint constraint = DVConstraint.createFormulaListConstraint(formulaString);    
        //设置数据有效性加载在哪个单元格上。     
        //四个参数分别是：起始行、终止行、起始列、终止列     
        int firstRow = naturalRowIndex-1;   
        int lastRow = naturalRowIndex-1;   
        int firstCol = naturalColumnIndex-1;   
        int lastCol = naturalColumnIndex-1;   
        CellRangeAddressList regions=new CellRangeAddressList(firstRow,lastRow,firstCol,lastCol);     
        //数据有效性对象    
        DataValidation data_validation_list = new HSSFDataValidation(regions,constraint);   
        //设置输入信息提示信息   
        data_validation_list.createPromptBox("下拉选择提示","请使用下拉方式选择合适的值！");   
        //设置输入错误提示信息   
        data_validation_list.createErrorBox("选择错误提示","你输入的值未在备选列表中，请下拉选择合适的值！");   
        return data_validation_list;   
    }   
    
    private static DataValidation getDataValidationByDate(int naturalRowIndex,int naturalColumnIndex){   
        //加载下拉列表内容     
        DVConstraint constraint = DVConstraint.createDateConstraint(DVConstraint.OperatorType.BETWEEN,"1900-01-01", "5000-01-01", "yyyy-mm-dd");    
        //设置数据有效性加载在哪个单元格上。     
        //四个参数分别是：起始行、终止行、起始列、终止列     
        int firstRow = naturalRowIndex-1;   
        int lastRow = naturalRowIndex-1;   
        int firstCol = naturalColumnIndex-1;   
        int lastCol = naturalColumnIndex-1;   
        CellRangeAddressList regions=new CellRangeAddressList(firstRow,lastRow,firstCol,lastCol);     
        //数据有效性对象    
        DataValidation data_validation_list = new HSSFDataValidation(regions,constraint);   
        //设置输入信息提示信息   
        data_validation_list.createPromptBox("日期格式提示","请按照'yyyy-mm-dd'格式输入日期值！");   
        //设置输入错误提示信息   
        data_validation_list.createErrorBox("日期格式错误提示","你输入的日期格式不符合'yyyy-mm-dd'格式规范，请重新输入！");   
        return data_validation_list;   
    }

	public static void main(String[] args) throws Exception 
	{
		File file = new File("C:/Users/lijing/Desktop/student.xls");
		FileOutputStream out = new FileOutputStream(file);
		createExcel(Student.class,out);
		
//		String jsonArea = ResourceReaderUtil.loadTemplate("/local/area.json");
//    	JSONArray rootArray = JSON.parseArray(jsonArea);
//    	//省
//    	String[] provinceList = new String[rootArray.size()];
//    	StringBuffer sb=new StringBuffer();
//    	for(int i=0;i<rootArray.size();i++){
//    		
//    		JSONObject provinceObject = rootArray.getJSONObject(i);
//    		String province = provinceObject.getString("name");
//    		provinceList[i]=province;
//    		//市
//    		JSONArray cityArray = provinceObject.getJSONArray("city");
//    		String[] cityList = new String[cityArray.size()];
//    		for(int j=0;j<cityArray.size();j++){
//    			JSONObject cityObject = cityArray.getJSONObject(j);
//        		String city = cityObject.getString("name");
//        		cityList[j]=city;
//        		//区
//        		JSONArray areaArray = cityObject.getJSONArray("area");
//        		String[] areaList=new String[areaArray.size()];
//        		for(int k=0;k<areaArray.size();k++){
//        			String area = areaArray.getString(k);
//        			areaList[k]=area;
//        			sb.append("insert into t_area(PID,PROVINCE,CID,CITY,AID,AREA) values('P00"+(i+1)+"','"+province+"','C00"+(j+1)+"','"+city+"','A00"+(k+1)+"','"+area+"');\n");
//        		}
//    		}
//    	}
//		File file = new File("C:/Users/lijing/Desktop/t_area.sql");
//		FileWriter fw=new FileWriter(file);
//		BufferedWriter bufw = new BufferedWriter(fw);
//		bufw.write(sb.toString());
//		bufw.flush();
//		bufw.close();
	}
	
	
}
