<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 		xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 		xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">
		
		<!-- 扫描包下面的注解 -->
		<context:component-scan base-package="com.kaisn.service"></context:component-scan>
		
		<!-- 加载数据库配置属性文件 -->
		<context:property-placeholder location="classpath:db.properties"/>
		
		<!-- 配置数据源 借助 DruidDataSource类 -->
		<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
			<!-- 驱动 -->
			<property name="driverClassName" value="${jdbc.driver}"/>
			<!-- url -->
			<property name="url" value="${jdbc.url}"/>
			<!-- 用户名 -->
			<property name="username" value="${jdbc.username}"/>
			<!-- 密码 -->
			<property name="password" value="${jdbc.password}"/>
		</bean>
		
		<!-- 配置会话工厂 借助 SqlSessionFactoryBean类 -->
		<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		
			<property name="configLocation" value="classpath:SqlMapConfig.xml"></property>
			
			<property name="dataSource" ref="dataSource"></property>

			<property name="mapperLocations" value="classpath:mapper/*.xml"></property>
						
		</bean>
		
		<!-- 扫描子配置文件mapper 借助 MapperScannerConfigurer -->
		<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
			<!-- 扫描子配置文件 -->
			<property name="basePackage" value="com.kaisn.dao"></property>
		</bean>
		
		<!-- 配置一个可以执行批量处理的SQLSession -->
		<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
			<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
			<constructor-arg name="executorType" value="BATCH"></constructor-arg>
		</bean>
		
		<!-- 事物控制配置 -->
		<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
			<!-- 控制数据源 -->
			<property name="dataSource" ref="dataSource"></property>
		</bean>
		
		
		<!-- 开启注解的事物，使用xml配置形式的事务 -->
		<aop:config>
			<!-- 切入点表达式 -->
			<aop:pointcut expression="execution(* com.huiji.service..*(..))" id="txPoint"/>
			<!-- 配置事物增强 -->
			<aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
		</aop:config>
		
		<!-- 配置事物增强，如何切入事务 -->
		<tx:advice id="txAdvice" transaction-manager="transactionManager">
			<tx:attributes>
				<!-- 所有的方法都是事物方法 -->
				<tx:method name="*"/>
				<!-- 以get开始的所有方法 -->
				<tx:method name="get*" read-only="true"/>
			</tx:attributes>
		</tx:advice>
		
		
		<!-- spring文件的核心配置点 数据源，与mybatis框架的整合，事物控制 -->
</beans>